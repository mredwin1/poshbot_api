AWSTemplateFormatVersion: '2010-09-09'
Description: 'This stack deploys all necessary resources for a deployment'

Parameters:
  GlobalResourcesStackName:
    Type: String
    Description: 'The stack name used when deploying the global resources template'
  Environment:
    Type: String
    Description: 'The environment the stack will be deploying to'
  Version:
    Type: String
    Description: 'The version of the application'
  DockerImage:
    Type: String
    Description: 'The image to use for the containers'

Conditions:
  IsProd: !Equals [ !Ref Environment, 'production' ]

Resources:
  Database:
    Type: 'AWS::RDS::DBInstance'
    DeletionPolicy: Delete
    Properties:
      Engine: 'postgres'
      DBInstanceIdentifier: !Sub
        - '${ApplicationName}-db-${Environment}'
        - Environment: !Ref Environment
          ApplicationName:
            Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationName' ] ]
      MasterUsername: !Sub
        - '${ApplicationName}admin'
        - ApplicationName:
            Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationName' ] ]
      ManageMasterUserPassword: true
      AllocatedStorage: 400
      MaxAllocatedStorage: 1000
      DBName:
        Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationName' ] ]
      DBSubnetGroupName: !Ref DBSubnetGroup
      StorageType: gp3
      Iops: 12000
      DBInstanceClass: 'db.t3.micro'
      VPCSecurityGroups:
        - !GetAtt DatabaseSecurityGroup.GroupId
      AvailabilityZone: 'us-east-1a'

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: 'Subnet group for application db'
      DBSubnetGroupName: !Sub
        - '${ApplicationName}-db-group-${Environment}'
        - Environment: !Ref Environment
          ApplicationName:
            Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationName' ] ]
      SubnetIds: !Split
        - ","
        - Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'PrivateSubnetIds' ] ]

  DatabaseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub
       - '${ApplicationName}-RDS-${Environment}'
       - Environment: !Ref Environment
         ApplicationName:
           Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationName' ] ]
      VpcId:
        Fn::ImportValue: !Sub '${GlobalResourcesStackName}:VPCId'
      GroupDescription: 'Security group for communication with RDS'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !GetAtt APISecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !GetAtt ECSServiceSecurityGroup.GroupId

  APISecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub
        - '${ApplicationName}-ecs-${Environment}'
        - Environment: !Ref Environment
          ApplicationName:
            Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationName' ] ]
      VpcId:
        Fn::ImportValue: !Sub '${GlobalResourcesStackName}:VPCId'
      GroupDescription: 'Security group for communication with ECS api containers'
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt ELBSecurityGroup.GroupId

  ELBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub
        - '${ApplicationName}-elb-${Environment}'
        - Environment: !Ref Environment
          ApplicationName:
            Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationName' ] ]
      VpcId:
        Fn::ImportValue: !Sub '${GlobalResourcesStackName}:VPCId'
      GroupDescription: 'Security group for public communication with elb'
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443

  ECSServiceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub
        - '${ApplicationName}-ecs-service-${Environment}'
        - Environment: !Ref Environment
          ApplicationName:
            Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationName' ] ]
      VpcId:
        Fn::ImportValue: !Sub '${GlobalResourcesStackName}:VPCId'
      GroupDescription: 'Security group for ecs services to have open outbound communication'
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ElastiCacheSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub
        - '${ApplicationName}-elasti-cache-${Environment}'
        - Environment: !Ref Environment
          ApplicationName:
            Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationName' ] ]
      VpcId:
        Fn::ImportValue: !Sub '${GlobalResourcesStackName}:VPCId'
      GroupDescription: 'Security group for communication with ElastiCache'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !GetAtt ECSServiceSecurityGroup.GroupId

  ECSCluster:
    Type: AWS::ECS::Cluster
    DependsOn: Database
    Properties:
      ClusterName: !Sub
        - '${ApplicationName}-ecs-cluster-${Environment}'
        - Environment: !Ref Environment
          ApplicationName:
            Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationName' ] ]

  APITaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub
        - '${ApplicationName}-api-task-definition-${Environment}'
        - Environment: !Ref Environment
          ApplicationName:
            Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationName' ] ]
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      Cpu: 1024
      Memory: 2048
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      ContainerDefinitions:
        - Name: api-container
          Image: !Ref DockerImage
          EntryPoint:
            - 'python3'
            - 'manage.py'
            - 'start'
          RepositoryCredentials:
            CredentialsParameter:
              Fn::ImportValue: !Sub '${GlobalResourcesStackName}:PackageRegistryCredentials'
          PortMappings:
            - ContainerPort: 80
              AppProtocol: http
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: api-container
          Environment:
            - Name: DJANGO_SETTINGS_MODULE
              Value: 'poshbot_api.settings.prod'
            - Name: SECRET_KEY
              Value: !Ref DjangoSecretKey
            - Name: DB_NAME
              Value: 'postgres'
            - Name: DB_SECRET
              Value: !GetAtt Database.MasterUserSecret.SecretArn
            - Name: DB_HOSTNAME
              Value: !GetAtt Database.Endpoint.Address
            - Name: DB_PORT
              Value: !GetAtt Database.Endpoint.Port
            - Name: AWS_STORAGE_BUCKET_NAME
              Value: !Ref S3Bucket
            - Name: DOMAIN
              Value: !Ref RecordSet
            - Name: MAINTENANCE_QUEUE
              Value: !GetAtt MaintenanceQueue.QueueName
            - Name: GENERAL_QUEUE
              Value: !GetAtt GeneralQueue.QueueName
            - Name: MASTER_USER_SECRET
              Value: !Ref MasterUserPassword
            - Name: REDIS_ENDPOINT
              Value: !GetAtt ElastiCacheCluster.RedisEndpoint.Address
            - Name: CAPTCHA_SECRET
              Value:
                Fn::ImportValue: !Sub '${GlobalResourcesStackName}:2CaptchaAPIKeySecret'
            - Name: APPIUM_SECRET
              Value:
                Fn::ImportValue: !Sub '${GlobalResourcesStackName}:AppiumServerIPSecret'
            - Name: ZKE_SECRET
              Value:
                Fn::ImportValue: !Sub '${GlobalResourcesStackName}:ZKEDBCredentials'
            - Name: MOBILE_HOP_SECRET
              Value:
                Fn::ImportValue: !Sub '${GlobalResourcesStackName}:MobileHopCredentials'
            - Name: EMAIL_SECRET
              Value:
                Fn::ImportValue: !Sub '${GlobalResourcesStackName}:EmailCredentials'

  APIService:
    Type: AWS::ECS::Service
    DependsOn: HTTPSListener
    Properties:
      ServiceName: !Sub
        - '${ApplicationName}-api-service-${Environment}'
        - Environment: !Ref Environment
          ApplicationName:
            Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationName' ] ]
      EnableExecuteCommand: true
      EnableECSManagedTags: true
      PropagateTags: TASK_DEFINITION
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref APITaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - TargetGroupArn: !Ref APITargetGroup
          ContainerName: api-container
          ContainerPort: 80
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Split
            - ","
            - Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'PrivateSubnetIds' ] ]
          SecurityGroups:
            - !GetAtt DatabaseSecurityGroup.GroupId
            - !GetAtt APISecurityGroup.GroupId
            - !GetAtt ECSServiceSecurityGroup.GroupId

  APIScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 4
      MinCapacity: 1
      ResourceId: !Sub
        - 'service/${ECSClusterName}/${APIServiceName}'
        - ECSClusterName: !Ref ECSCluster
          APIServiceName: !GetAtt APIService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  APIScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub
        - '${ApplicationName}-api-scaling-policy-${Environment}'
        - Environment: !Ref Environment
          ApplicationName:
            Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationName' ] ]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref APIScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 85

  BeatTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub
        - '${ApplicationName}-beat-task-definition-${Environment}'
        - Environment: !Ref Environment
          ApplicationName:
            Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationName' ] ]
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      Cpu: 256
      Memory: 512
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      ContainerDefinitions:
        - Name: beat-container
          Image: !Ref DockerImage
          EntryPoint:
            - 'celery'
            - '-A'
            - 'poshbot_api'
            - 'beat'
            - '-S'
            - 'core.tasks.CustomBeatScheduler'
            - '-l'
            - 'INFO'
          RepositoryCredentials:
            CredentialsParameter:
              Fn::ImportValue: !Sub '${GlobalResourcesStackName}:PackageRegistryCredentials'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: beat-container
          Environment:
            - Name: DJANGO_SETTINGS_MODULE
              Value: 'poshbot_api.settings.prod'
            - Name: SECRET_KEY
              Value: !Ref DjangoSecretKey
            - Name: DB_NAME
              Value: 'postgres'
            - Name: DB_SECRET
              Value: !GetAtt Database.MasterUserSecret.SecretArn
            - Name: DB_HOSTNAME
              Value: !GetAtt Database.Endpoint.Address
            - Name: DB_PORT
              Value: !GetAtt Database.Endpoint.Port
            - Name: AWS_STORAGE_BUCKET_NAME
              Value: !Ref S3Bucket
            - Name: DOMAIN
              Value: !Ref RecordSet
            - Name: MAINTENANCE_QUEUE
              Value: !GetAtt MaintenanceQueue.QueueName
            - Name: GENERAL_QUEUE
              Value: !GetAtt GeneralQueue.QueueName
            - Name: MASTER_USER_SECRET
              Value: !Ref MasterUserPassword
            - Name: REDIS_ENDPOINT
              Value: !GetAtt ElastiCacheCluster.RedisEndpoint.Address
            - Name: CAPTCHA_SECRET
              Value:
                Fn::ImportValue: !Sub '${GlobalResourcesStackName}:2CaptchaAPIKeySecret'
            - Name: APPIUM_SECRET
              Value:
                Fn::ImportValue: !Sub '${GlobalResourcesStackName}:AppiumServerIPSecret'
            - Name: ZKE_SECRET
              Value:
                Fn::ImportValue: !Sub '${GlobalResourcesStackName}:ZKEDBCredentials'
            - Name: MOBILE_HOP_SECRET
              Value:
                Fn::ImportValue: !Sub '${GlobalResourcesStackName}:MobileHopCredentials'
            - Name: EMAIL_SECRET
              Value:
                Fn::ImportValue: !Sub '${GlobalResourcesStackName}:EmailCredentials'

  BeatService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub
        - '${ApplicationName}-beat-service-${Environment}'
        - Environment: !Ref Environment
          ApplicationName:
            Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationName' ] ]
      EnableExecuteCommand: true
      EnableECSManagedTags: true
      PropagateTags: TASK_DEFINITION
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref BeatTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Split
            - ","
            - Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'PrivateSubnetIds' ] ]
          SecurityGroups:
            - !GetAtt ECSServiceSecurityGroup.GroupId

  MaintenanceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub
        - '${ApplicationName}-maintenance-task-definition-${Environment}'
        - Environment: !Ref Environment
          ApplicationName:
            Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationName' ] ]
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      Cpu: 1024
      Memory: 2048
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      ContainerDefinitions:
        - Name: maintenance-container
          Image: !Ref DockerImage
          StopTimeout: 120
          EntryPoint:
            - 'celery'
            - '-A'
            - 'poshbot_api'
            - 'worker'
            - '--concurrency=3'
            - '-Q'
            - !GetAtt MaintenanceQueue.QueueName
            - '-l'
            - 'INFO'
          RepositoryCredentials:
            CredentialsParameter:
              Fn::ImportValue: !Sub '${GlobalResourcesStackName}:PackageRegistryCredentials'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: maintenance-container
          Environment:
            - Name: DJANGO_SETTINGS_MODULE
              Value: 'poshbot_api.settings.prod'
            - Name: SECRET_KEY
              Value: !Ref DjangoSecretKey
            - Name: DB_NAME
              Value: 'postgres'
            - Name: DB_SECRET
              Value: !GetAtt Database.MasterUserSecret.SecretArn
            - Name: DB_HOSTNAME
              Value: !GetAtt Database.Endpoint.Address
            - Name: DB_PORT
              Value: !GetAtt Database.Endpoint.Port
            - Name: AWS_STORAGE_BUCKET_NAME
              Value: !Ref S3Bucket
            - Name: DOMAIN
              Value: !Ref RecordSet
            - Name: MAINTENANCE_QUEUE
              Value: !GetAtt MaintenanceQueue.QueueName
            - Name: GENERAL_QUEUE
              Value: !GetAtt GeneralQueue.QueueName
            - Name: MASTER_USER_SECRET
              Value: !Ref MasterUserPassword
            - Name: REDIS_ENDPOINT
              Value: !GetAtt ElastiCacheCluster.RedisEndpoint.Address
            - Name: CAPTCHA_SECRET
              Value:
                Fn::ImportValue: !Sub '${GlobalResourcesStackName}:2CaptchaAPIKeySecret'
            - Name: APPIUM_SECRET
              Value:
                Fn::ImportValue: !Sub '${GlobalResourcesStackName}:AppiumServerIPSecret'
            - Name: ZKE_SECRET
              Value:
                Fn::ImportValue: !Sub '${GlobalResourcesStackName}:ZKEDBCredentials'
            - Name: MOBILE_HOP_SECRET
              Value:
                Fn::ImportValue: !Sub '${GlobalResourcesStackName}:MobileHopCredentials'
            - Name: EMAIL_SECRET
              Value:
                Fn::ImportValue: !Sub '${GlobalResourcesStackName}:EmailCredentials'

  MaintenanceService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub
        - '${ApplicationName}-maintenance-service-${Environment}'
        - Environment: !Ref Environment
          ApplicationName:
            Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationName' ] ]
      EnableExecuteCommand: true
      EnableECSManagedTags: true
      PropagateTags: TASK_DEFINITION
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref MaintenanceTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: !Split
            - ","
            - Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'PublicSubnetIds' ] ]
          SecurityGroups:
            - !GetAtt DatabaseSecurityGroup.GroupId
            - !GetAtt ECSServiceSecurityGroup.GroupId

  GeneralTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub
        - '${ApplicationName}-general-task-definition-${Environment}'
        - Environment: !Ref Environment
          ApplicationName:
            Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationName' ] ]
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      Cpu: 2048
      Memory: 4096
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      ContainerDefinitions:
        - Name: general-container
          Image: !Ref DockerImage
          StopTimeout: 120
          EntryPoint:
            - 'celery'
            - '-A'
            - 'poshbot_api'
            - 'worker'
            - '--concurrency=3'
            - '-Q'
            - !GetAtt GeneralQueue.QueueName
            - '-l'
            - 'INFO'
          RepositoryCredentials:
            CredentialsParameter:
              Fn::ImportValue: !Sub '${GlobalResourcesStackName}:PackageRegistryCredentials'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: general-container
          Environment:
            - Name: DJANGO_SETTINGS_MODULE
              Value: 'poshbot_api.settings.prod'
            - Name: SECRET_KEY
              Value: !Ref DjangoSecretKey
            - Name: DB_NAME
              Value: 'postgres'
            - Name: DB_SECRET
              Value: !GetAtt Database.MasterUserSecret.SecretArn
            - Name: DB_HOSTNAME
              Value: !GetAtt Database.Endpoint.Address
            - Name: DB_PORT
              Value: !GetAtt Database.Endpoint.Port
            - Name: AWS_STORAGE_BUCKET_NAME
              Value: !Ref S3Bucket
            - Name: DOMAIN
              Value: !Ref RecordSet
            - Name: MAINTENANCE_QUEUE
              Value: !GetAtt MaintenanceQueue.QueueName
            - Name: GENERAL_QUEUE
              Value: !GetAtt GeneralQueue.QueueName
            - Name: MASTER_USER_SECRET
              Value: !Ref MasterUserPassword
            - Name: REDIS_ENDPOINT
              Value: !GetAtt ElastiCacheCluster.RedisEndpoint.Address
            - Name: CAPTCHA_SECRET
              Value:
                Fn::ImportValue: !Sub '${GlobalResourcesStackName}:2CaptchaAPIKeySecret'
            - Name: APPIUM_SECRET
              Value:
                Fn::ImportValue: !Sub '${GlobalResourcesStackName}:AppiumServerIPSecret'
            - Name: ZKE_SECRET
              Value:
                Fn::ImportValue: !Sub '${GlobalResourcesStackName}:ZKEDBCredentials'
            - Name: MOBILE_HOP_SECRET
              Value:
                Fn::ImportValue: !Sub '${GlobalResourcesStackName}:MobileHopCredentials'
            - Name: EMAIL_SECRET
              Value:
                Fn::ImportValue: !Sub '${GlobalResourcesStackName}:EmailCredentials'

  GeneralService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub
        - '${ApplicationName}-general-service-${Environment}'
        - Environment: !Ref Environment
          ApplicationName:
            Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationName' ] ]
      EnableExecuteCommand: true
      EnableECSManagedTags: true
      PropagateTags: TASK_DEFINITION
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref GeneralTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: !Split
            - ","
            - Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'PublicSubnetIds' ] ]
          SecurityGroups:
            - !GetAtt DatabaseSecurityGroup.GroupId
            - !GetAtt ECSServiceSecurityGroup.GroupId

  GeneralScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 8
      MinCapacity: 1
      ResourceId: !Sub
        - 'service/${ECSClusterName}/${GeneralServiceName}'
        - ECSClusterName: !Ref ECSCluster
          GeneralServiceName: !GetAtt GeneralService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  GeneralScaleUpPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyType: 'StepScaling'
      PolicyName: !Sub
        - '${ApplicationName}-general-scale-up-policy-${Environment}'
        - Environment: !Ref Environment
          ApplicationName:
            Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationName' ] ]
      ScalingTargetId: !Ref GeneralScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: 'ChangeInCapacity'
        Cooldown: 60
        MetricAggregationType: 'Average'
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            MetricIntervalUpperBound: 12
            ScalingAdjustment: 1
          - MetricIntervalLowerBound: 12
            ScalingAdjustment: 2

  GeneralScaleDownPolicy:
    Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
    Properties:
      PolicyType: 'StepScaling'
      PolicyName: !Sub
        - '${ApplicationName}-general-scale-down-policy-${Environment}'
        - Environment: !Ref Environment
          ApplicationName:
            Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationName' ] ]
      ScalingTargetId: !Ref GeneralScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: 'ExactCapacity'
        Cooldown: 120
        MetricAggregationType: 'Average'
        StepAdjustments:
          - MetricIntervalUpperBound: -8
            ScalingAdjustment: 1
          - MetricIntervalLowerBound: -8
            MetricIntervalUpperBound: 0
            ScalingAdjustment: 1

  GeneralScaleOutAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: !Sub
        - '${ApplicationName}-general-scale-out-alarm-${Environment}'
        - Environment: !Ref Environment
          ApplicationName:
            Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationName' ] ]
      ComparisonOperator: 'GreaterThanThreshold'
      EvaluationPeriods: 1
      MetricName: 'ApproximateNumberOfMessagesVisible'
      Namespace: 'AWS/SQS'
      Period: 30
      Threshold: 8
      Statistic: 'Sum'
      AlarmDescription: !Sub
        - 'Alarm used for scaling ${ServiceName}'
        - ServiceName: !GetAtt GeneralService.Name
      AlarmActions:
        - !Ref GeneralScaleUpPolicy
      Dimensions:
        - Name: QueueName
          Value: !GetAtt GeneralQueue.QueueName

  GeneralScaleInAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmName: !Sub
        - '${ApplicationName}-general-scale-in-alarm-${Environment}'
        - Environment: !Ref Environment
          ApplicationName:
            Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationName' ] ]
      ComparisonOperator: 'LessThanOrEqualToThreshold'
      EvaluationPeriods: 1
      MetricName: 'ApproximateNumberOfMessagesVisible'
      Namespace: 'AWS/SQS'
      Period: 60
      Threshold: 8
      Statistic: 'Sum'
      AlarmDescription: !Sub
        - 'Alarm used for scaling ${ServiceName}'
        - ServiceName: !GetAtt GeneralService.Name
      AlarmActions:
        - !Ref GeneralScaleDownPolicy
      Dimensions:
        - Name: QueueName
          Value: !GetAtt GeneralQueue.QueueName

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub
        - '${ApplicationName}-files-${Environment}'
        - Environment: !Ref Environment
          ApplicationName:
            Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationName' ] ]
      AccessControl: Private

  RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId:
        Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationHostedZone' ] ]
      Name: !If
        - IsProd
        - Fn::Sub:
          - 'api.${Domain}'
          - Domain:
              Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationDomain' ] ]
        - Fn::Sub:
          - '${Environment}.api.${Domain}'
          - Domain:
              Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationDomain' ] ]
            Environment: !Ref Environment
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt APILoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt APILoadBalancer.DNSName

  APILoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub
        - '${ApplicationName}-elb-${Environment}'
        - Environment: !Ref Environment
          ApplicationName:
            Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationName' ] ]
      SecurityGroups:
        - !GetAtt APISecurityGroup.GroupId
        - !GetAtt ELBSecurityGroup.GroupId
      Scheme: internet-facing
      Subnets: !Split
            - ","
            - Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'PublicSubnetIds' ] ]

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: '443'
            StatusCode: 'HTTP_301'
      LoadBalancerArn: !Ref APILoadBalancer
      Port: 80
      Protocol: HTTP

  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref APITargetGroup
      LoadBalancerArn: !Ref APILoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref SSLCertificate

  APITargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: '/health'
      Name: !Sub
        - '${ApplicationName}-tgt-grp-${Environment}'
        - Environment: !Ref Environment
          ApplicationName:
            Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationName' ] ]
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Fn::ImportValue: !Sub '${GlobalResourcesStackName}:VPCId'

  SSLCertificate:
    Type: AWS::CertificateManager::Certificate
    DependsOn: RecordSet
    Properties:
      DomainName: !If
        - IsProd
        - Fn::Sub:
          - 'api.${Domain}'
          - Domain:
              Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationDomain' ] ]
        - Fn::Sub:
          - '${Environment}.api.${Domain}'
          - Domain:
              Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationDomain' ] ]
            Environment: !Ref Environment
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !If
          - IsProd
          - Fn::Sub:
            - 'api.${Domain}'
            - Domain:
                Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationDomain' ] ]
          - Fn::Sub:
            - '${Environment}.api.${Domain}'
            - Domain:
                Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationDomain' ] ]
              Environment: !Ref Environment
          HostedZoneId:
            Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationHostedZone' ] ]

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub
        - '${ApplicationName}-task-execution-role-${Environment}'
        - Environment: !Ref Environment
          ApplicationName:
            Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationName' ] ]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                Resource:
                  - Fn::ImportValue: !Sub '${GlobalResourcesStackName}:PackageRegistryCredentials'
        - PolicyName: AWSCloudWatch
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: !GetAtt ECSLogGroup.Arn

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub
        - '${ApplicationName}-task-role-${Environment}'
        - Environment: !Ref Environment
          ApplicationName:
            Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationName' ] ]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:*"
                Resource:
                  - !GetAtt S3Bucket.Arn
                  - !Sub
                    - '${BucketArn}/*'
                    - BucketArn: !GetAtt S3Bucket.Arn
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                Resource:
                  - Fn::ImportValue: !Sub '${GlobalResourcesStackName}:2CaptchaAPIKeySecret'
                  - Fn::ImportValue: !Sub '${GlobalResourcesStackName}:OctoAPIKeySecret'
                  - Fn::ImportValue: !Sub '${GlobalResourcesStackName}:AppiumServerIPSecret'
                  - Fn::ImportValue: !Sub '${GlobalResourcesStackName}:ZKEDBCredentials'
                  - Fn::ImportValue: !Sub '${GlobalResourcesStackName}:MobileHopCredentials'
                  - Fn::ImportValue: !Sub '${GlobalResourcesStackName}:EmailCredentials'
                  - !Ref DjangoSecretKey
                  - !Ref MasterUserPassword
                  - !GetAtt Database.MasterUserSecret.SecretArn
        - PolicyName: SQSAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sqs:SendMessage"
                  - "sqs:ReceiveMessage"
                  - "sqs:DeleteMessage"
                  - "sqs:ListQueues"
                  - "sqs:GetQueueAttributes"
                  - "sqs:changemessagevisibility"
                Resource: '*'

  MaintenanceQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub
        - '${ApplicationName}-maintenance-queue-${Environment}'
        - Environment: !Ref Environment
          ApplicationName:
            Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationName' ] ]
      VisibilityTimeout: 1200
      ReceiveMessageWaitTimeSeconds: 2

  GeneralQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub
        - '${ApplicationName}-general-queue-${Environment}'
        - Environment: !Ref Environment
          ApplicationName:
            Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationName' ] ]
      VisibilityTimeout: 1200
      ReceiveMessageWaitTimeSeconds: 2

  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub
        - '/ecs/${ApplicationName}-log-group-${Environment}'
        - Environment: !Ref Environment
          ApplicationName:
            Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationName' ] ]
      RetentionInDays: 7

  DjangoSecretKey:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub
        - '${ApplicationName}-django-secret-key-${Environment}'
        - Environment: !Ref Environment
          ApplicationName:
            Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationName' ] ]
      Description: 'The secret key for the django application'
      GenerateSecretString:
        IncludeSpace: false
        PasswordLength: 52

  MasterUserPassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub
        - '${ApplicationName}-django-master-password-${Environment}'
        - Environment: !Ref Environment
          ApplicationName:
            Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationName' ] ]
      Description: 'The password for the master admin for the django application'
      GenerateSecretString:
        IncludeSpace: false
        PasswordLength: 15

  ElastiCacheCluster:
    Type: 'AWS::ElastiCache::CacheCluster'
    Properties:
      ClusterName: !Sub
        - '${ApplicationName}-elasti-cache-${Environment}'
        - Environment: !Ref Environment
          ApplicationName:
            Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'ApplicationName' ] ]
      CacheNodeType: cache.t3.micro
      Engine: redis
      NumCacheNodes: 1
      Port: 6379
      CacheSubnetGroupName: !Ref ElastiCacheSubnetGroup
      VpcSecurityGroupIds:
        - !GetAtt ElastiCacheSecurityGroup.GroupId
      AutoMinorVersionUpgrade: true

  ElastiCacheSubnetGroup:
    Type: 'AWS::ElastiCache::SubnetGroup'
    Properties:
      Description: Subnet group for ElastiCache
      SubnetIds: !Split
        - ","
        - Fn::ImportValue: !Join [ ":", [ !Ref GlobalResourcesStackName, 'PrivateSubnetIds' ] ]

Outputs:
  MasterUserPasswordArn:
    Value: !Ref MasterUserPassword
    Description: 'The ARN for the AWS secret where the master user password is stored'
  BackendURL:
    Value: !Sub
      - 'https://${DNSName}/admin'
      - DNSName: !Ref RecordSet
    Description: 'The url for the backend'
  ClusterName:
    Value: !Ref ECSCluster
    Description: 'The name of the ECS Cluster'
  APIService:
    Value: !GetAtt APIService.Name
    Description: 'The name of the API Service'
  MaintenanceService:
    Value: !GetAtt MaintenanceService.Name
    Description: 'The name of the Maintenance Service'
  BeatService:
    Value: !GetAtt BeatService.Name
    Description: 'The name of the Beat Service'
  GeneralService:
    Value: !GetAtt GeneralService.Name
    Description: 'The name of the General Service'