AWSTemplateFormatVersion: '2010-09-09'
Description: This stack deploys all necessary foundations for the application

Parameters:
  ApplicationName:
    Type: String
    Description: 'The name of the application'
  Domain:
    Type: String
    Description: 'The domain for the application eg. example.com'
  PackageRegistryUsername:
    Type: String
    NoEcho: true
    Description: 'The username used to authenticate with the package registry'
  PackageRegistryPassword:
    Type: String
    NoEcho: true
    Description: 'The password used to authenticate with the package registry'
  EmailUsername:
    Type: String
    NoEcho: true
    Description: 'The username used for sending emails'
  EmailPassword:
    Type: String
    NoEcho: true
    Description: 'The password used for sending emails'
  MobileHopUsername:
    Type: String
    NoEcho: true
    Description: 'The username to authenticate with mobile hop'
  MobileHopPassword:
    Type: String
    NoEcho: true
    Description: 'The password used to authenticate with mobile hop'
  ZKEDBUsername:
    Type: String
    NoEcho: true
    Description: 'The username used for the ZKE database'
  ZKEDBPassword:
    Type: String
    NoEcho: true
    Description: 'The password used for the ZKE database'
  ZKEDBHost:
    Type: String
    NoEcho: true
    Description: 'The hostname used for the ZKE database'
  ZKEDBPort:
    Type: String
    NoEcho: true
    Description: 'The port used for the ZKE database'
  ZKEDBName:
    Type: String
    NoEcho: true
    Description: 'The name of the databse used for the ZKE database'
  AppiumServerIP:
    Type: String
    NoEcho: true
    Description: 'The ip address of the appium server'
  2CaptchaAPIKey:
    Type: String
    NoEcho: true
    Description: 'The API key for the 2Captcha service'
  OctoAPIKey:
    Type: String
    NoEcho: true
    Description: 'The API key for the Octo Browser service'

Mappings:
  # Hard values for the subnet masks. These masks define
  # the range of internal IP addresses that can be assigned.
  # The VPC can have all IP's from 10.0.0.0 to 10.0.255.255
  # There are four subnets which cover the ranges:
  #
  # 10.0.0.0 - 10.0.63.255 (16384 IP addresses)
  # 10.0.64.0 - 10.0.127.255 (16384 IP addresses)
  # 10.0.128.0 - 10.0.191.255 (16384 IP addresses)
  # 10.0.192.0 - 10.0.255.0 (16384 IP addresses)
  #
  SubnetConfig:
    VPC:
      CIDR: '10.0.0.0/16'
    PublicOne:
      CIDR: '10.0.0.0/18'
    PublicTwo:
      CIDR: '10.0.64.0/18'
    PrivateOne:
      CIDR: '10.0.128.0/18'
    PrivateTwo:
      CIDR: '10.0.192.0/18'

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ['SubnetConfig', 'VPC', 'CIDR']

  # Two public subnets, where containers can have public IP addresses
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicOne', 'CIDR']
      MapPublicIpOnLaunch: true
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PublicTwo', 'CIDR']
      MapPublicIpOnLaunch: true

  # Two private subnets where containers will only have private
  # IP addresses, and will only be reachable by other members of the
  # VPC
  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateOne', 'CIDR']
  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: 'AWS::Region'}
      VpcId: !Ref 'VPC'
      CidrBlock: !FindInMap ['SubnetConfig', 'PrivateTwo', 'CIDR']

  # Setup networking resources for the public subnets. Containers
  # in the public subnets have public IP addresses and the routing table
  # sends network traffic via the internet gateway.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable

  # Setup networking resources for the private subnets. Containers
  # in these subnets have only private IP addresses, and must use a NAT
  # gateway to talk to the internet. We launch two NAT gateways, one for
  # each private subnet.
  NatGatewayOneAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
        Domain: vpc
  NatGatewayTwoAttachment:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachement
    Properties:
        Domain: vpc
  NatGatewayOne:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayOneAttachment.AllocationId
      SubnetId: !Ref PublicSubnetOne
  NatGatewayTwo:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayTwoAttachment.AllocationId
      SubnetId: !Ref PublicSubnetTwo
  PrivateRouteTableOne:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PrivateRouteOne:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayOne
  PrivateRouteTableOneAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      SubnetId: !Ref PrivateSubnetOne
  PrivateRouteTableTwo:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PrivateRouteTwo:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayTwo
  PrivateRouteTableTwoAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      SubnetId: !Ref PrivateSubnetTwo

  # VPC Endpoints for all the private subnets for all the used AWS Services
  SQSEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref 'VPC'
      VpcEndpointType: Interface
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.sqs'
      SubnetIds:
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref 'VPC'
      VpcEndpointType: Interface
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      SubnetIds:
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo
  SecretsManagerEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref 'VPC'
      VpcEndpointType: Interface
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.secretsmanager'
      SubnetIds:
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo
  ElasticFileSystemEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref 'VPC'
      VpcEndpointType: Interface
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.elasticfilesystem'
      SubnetIds:
        - !Ref PrivateSubnetOne
        - !Ref PrivateSubnetTwo

  # The hosted zone for the application
  HostedZone:
    Type: AWS::Route53::HostedZone
    DeletionPolicy: Delete
    Properties:
      Name: !Ref Domain

  # Global secrets used by the application
  PackageRegistryCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${ApplicationName}-registry-credentials-global'
      Description: 'Credentials used for docker package registry'
      SecretString: !Sub |
        {
          "username": "${PackageRegistryUsername}",
          "password": "${PackageRegistryPassword}"
        }

  EmailCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${ApplicationName}-email-credentials-global'
      Description: 'Credentials used for the application email address'
      SecretString: !Sub |
        {
          "username": "${EmailUsername}",
          "password": "${EmailPassword}"
        }

  MobileHopCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${ApplicationName}-mobile-hop-credentials-global'
      Description: 'Credentials used for the mobile hop console/api'
      SecretString: !Sub |
        {
          "username": "${MobileHopUsername}",
          "password": "${MobileHopPassword}"
        }

  ZKEDBCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${ApplicationName}-zke-db-credentials-global'
      Description: 'Credentials used for the ZKE database'
      SecretString: !Sub |
        {
          "username": "${ZKEDBUsername}",
          "password": "${ZKEDBPassword}",
          "host": "${ZKEDBHost}",
          "port": "${ZKEDBPort}",
          "dbname": "${ZKEDBName}"
        }

  AppiumServerIPSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${ApplicationName}-appium-server-ip-global'
      Description: 'The IP address for the Appium server'
      SecretString: !Ref AppiumServerIP

  2CaptchaAPIKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${ApplicationName}-2capcha-api-key-global'
      Description: 'The API key for the 2Captcha service'
      SecretString: !Ref 2CaptchaAPIKey

  OctoAPIKeySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${ApplicationName}-octo-api-key-global'
      Description: 'The API key for the Octo service'
      SecretString: !Ref OctoAPIKey

Outputs:
  VpcId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref 'VPC'
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", VPCId ] ]
  PublicSubnetIds:
    Description: Comma seperated list of public facing subnets that have a direct internet connection as long as you assign a public IP
    Value: !Sub '${PublicSubnetOne},${PublicSubnetTwo}'
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", PublicSubnetIds ] ]
  PrivateSubnetIds:
    Description: Comma seperated list of private subnets that use a NAT gateway for internet access.
    Value: !Sub '${PrivateSubnetOne},${PrivateSubnetTwo}'
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", PrivateSubnetIds ] ]
  ApplicationName:
    Description: The name of the application being deployed
    Value: !Ref ApplicationName
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", ApplicationName ] ]
  ApplicationDomain:
    Description: The domain name of the application being deployed
    Value: !Ref Domain
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", ApplicationDomain ] ]
  ApplicationHostedZone:
    Description: The id of the hosted zone for the application
    Value: !Ref HostedZone
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", ApplicationHostedZone ] ]
  PackageRegistrySecret:
    Description: The ARN for the package registry credentials secret
    Value: !Ref PackageRegistryCredentials
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", PackageRegistryCredentials ] ]
  EmailSecret:
    Description: The ARN for the email credentials secret
    Value: !Ref EmailCredentials
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", EmailCredentials ] ]
  MobileHopSecret:
    Description: The ARN for the mobile hop credentials secret
    Value: !Ref MobileHopCredentials
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", MobileHopCredentials ] ]
  ZKEDBSecret:
    Description: The ARN for the ZKE db credentials secret
    Value: !Ref ZKEDBCredentials
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", ZKEDBCredentials ] ]
  AppiumServerIPSecret:
    Description: The ARN for the appium server ip secret
    Value: !Ref AppiumServerIPSecret
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", AppiumServerIPSecret ] ]
  2CaptchaAPIKeySecret:
    Description: The ARN for the 2Captcha api key secret
    Value: !Ref 2CaptchaAPIKeySecret
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", 2CaptchaAPIKeySecret ] ]
  OctoAPIKeySecret:
    Description: The ARN for the Octo api key secret
    Value: !Ref OctoAPIKeySecret
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", OctoAPIKeySecret ] ]